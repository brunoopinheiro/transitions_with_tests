# autogenerated by transitions
from abc import ABCMeta, abstractmethod
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING

if TYPE_CHECKING:
    from transitions.core import CallbacksArg, StateIdentifier, EventData


class BaseModel(metaclass=ABCMeta):
    state: "StateIdentifier" = ""
    def trigger(self, name: str) -> bool: raise RuntimeError('This should be overridden')

    def go(self) -> bool: raise RuntimeError('This should be overridden')
    def may_go(self) -> bool: raise RuntimeError('This should be overridden')

    def is_A(self) -> bool: raise RuntimeError('This should be overridden')
    def to_A(self) -> bool: raise RuntimeError('This should be overridden')
    def may_to_A(self) -> bool: raise RuntimeError('This should be overridden')

    def is_B(self) -> bool: raise RuntimeError('This should be overridden')
    def to_B(self) -> bool: raise RuntimeError('This should be overridden')
    def may_to_B(self) -> bool: raise RuntimeError('This should be overridden')

    @abstractmethod
    def call_this(self, *args: List[Any], **kwargs: Dict[str, Any]) -> Optional[bool]: ...
